export interface ThoughtSummary {
  id: string;
  createdAt: Date;
  content?: string;        // Markdown content (new format)
  title?: string;          // Extracted title for sidebar display (new format)
  
  // Legacy format compatibility
  subject?: string;
  background?: string;
  hypothesis?: string;
  analysis?: string;
  decision?: string;
  development?: string;
  insights?: string;
  output?: string;
}

export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}

export function generateMarkdownText(summary: ThoughtSummary): string {
  const date = new Date(summary.createdAt).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  const title = summary.subject || summary.title || 'Untitled';
  
  // 8カテゴリ形式のMarkdown生成
  let markdown = `# ${title} - ${date}\n\n`;
  
  if (summary.subject) {
    markdown += `## 🎯 Subject\n${summary.subject}\n\n`;
  }
  if (summary.background) {
    markdown += `## 📋 Background\n${summary.background}\n\n`;
  }
  if (summary.hypothesis) {
    markdown += `## 💭 Hypothesis\n${summary.hypothesis}\n\n`;
  }
  if (summary.analysis) {
    markdown += `## 🔍 Analysis\n${summary.analysis}\n\n`;
  }
  if (summary.decision) {
    markdown += `## ✅ Decision\n${summary.decision}\n\n`;
  }
  if (summary.development) {
    markdown += `## 🚀 Development\n${summary.development}\n\n`;
  }
  if (summary.insights) {
    markdown += `## 💡 Insights\n${summary.insights}\n\n`;
  }
  if (summary.output) {
    markdown += `## 📤 Output\n${summary.output}\n\n`;
  }
  
  // 古い形式との互換性
  if (summary.content && !summary.subject) {
    markdown += `${summary.content}\n\n`;
  }
  
  markdown += `---\n*Generated by Scribble*`;
  
  return markdown;
}

// Markdown content から title を抽出する関数
export function extractTitleFromMarkdown(content: string): string {
  const firstHeading = content.match(/^#\s+(.+)$/m);
  if (firstHeading) {
    return firstHeading[1].trim();
  }
  
  const subjectMatch = content.match(/##\s+Subject\s*\n([^\n]+)/i);
  if (subjectMatch) {
    return subjectMatch[1].trim();
  }
  
  return 'Untitled Summary';
}